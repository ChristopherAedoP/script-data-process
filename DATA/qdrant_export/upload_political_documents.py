#!/usr/bin/env python3
"""
Auto-generated script to upload political documents to Qdrant
Generated by RAG Political System
"""
import json
from qdrant_client import QdrantClient
from qdrant_client.http import models

def upload_to_qdrant(qdrant_url="http://localhost:6333", collection_name="political_documents"):
    """Upload data to Qdrant instance"""
    
    # Initialize client
    client = QdrantClient(url=qdrant_url)
    
    # Create collection if it doesn't exist
    try:
        client.get_collection(collection_name)
        print(f"Collection {collection_name} already exists")
    except:
        client.create_collection(
            collection_name=collection_name,
            vectors_config=models.VectorParams(
                size=384,
                distance=models.Distance.COSINE
            )
        )
        print(f"Created collection {collection_name}")
    
    # Load points from JSON file
    with open("data\qdrant_export\upload_political_documents.json", 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    points = data["points"]
    
    # Upload points in batches
    batch_size = 100
    total_points = len(points)
    
    for i in range(0, total_points, batch_size):
        batch = points[i:i + batch_size]
        
        qdrant_points = [
            models.PointStruct(
                id=point["id"],
                vector=point["vector"],
                payload=point["payload"]
            )
            for point in batch
        ]
        
        client.upsert(
            collection_name=collection_name,
            points=qdrant_points
        )
        
        print(f"Uploaded batch {i//batch_size + 1}/{(total_points + batch_size - 1)//batch_size}")
    
    print(f"Successfully uploaded {total_points} points to Qdrant")
    
    # Print collection stats
    collection_info = client.get_collection(collection_name)
    print(f"Collection info: {collection_info}")

if __name__ == "__main__":
    upload_to_qdrant()
